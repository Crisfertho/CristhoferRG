---
import Toggle from "./Toogle.astro"

const navOptions = [
  {
    title: "Inicio",
    label: "inicio",
    url: "/#inicio",
  },
  {
    title: "Proyectos",
    label: "proyectos",
    url: "/#proyectos",
  },
  {
    title: "Habilidades",
    label: "habilidades",
    url: "/#skills"
  },
  {
    title: "Sobre m√≠",
    label: "sobre-mi",
    url: "/#sobre-mi",
  },
  {
    title: "Contacto",
    label: "contacto",
    url: "/#footer"
  }
]
---
<header class="flex justify-center items-center py-3 mt-2 w-full mx-auto fixed z-10">
    <nav class="flex flex-wrap p-1 gap-x-4 text-sm font-medium rounded-full text-gray-600 dark:text-gray-200 justify-center items-center sm:text-xs md:text-sm lg:text-base">
        {
          navOptions.map((link) => (
            <a
              class="relative block px-2 py-2 transition hover:text-emerald-500 dark:hover:text-emerald-500"
              aria-label={link.label}  
              href={link.url}            
            >
              {link.title}
            </a>
          ))
        }
        <Toggle />
    </nav>
</header>

<script>
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section")
    const navItems = document.querySelectorAll("header nav a")

    const callback = (entries: IntersectionObserverEntry[]) => {
      entries.forEach((entry: IntersectionObserverEntry) => {
        const navItem = Array.from(navItems).find(
          item => item.getAttribute("aria-label") === entry.target.id
        );

        if (entry.isIntersecting && navItem) {
          navItem.classList.add("text-emerald-500");
        } else if (navItem) {
          navItem.classList.remove("text-emerald-500");
        }
      });
    };

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    })

    sections.forEach((section) => {
      observer.observe(section)
    })

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect()
      } else {
        sections.forEach((section) => {
          observer.observe(section)
        })
      }
    }
  })
</script>

<style>
  nav {
    animation: nav-shadown 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 100px;
  }

  nav {
    @apply dark:bg-gray-800/90 bg-white/50;
  }

  @keyframes nav-shadown {
    0% {
      @apply dark:bg-gray-800/0 bg-white/0;
    }
    to {
      @apply shadow-lg ring-1 backdrop-blur ring-white/10;
    }
  }
</style>